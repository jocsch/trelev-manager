akka {
	actor {



		serializers {
			trelev-event-created = "org.trelev.eventmgr.serializer.EventCreatedSerializer"
			trelev-event-canceled = "org.trelev.eventmgr.serializer.EventCanceledSerializer"
			trelev-event-updated = "org.trelev.eventmgr.serializer.EventUpdatedSerializer"
			trelev-participant-registered= "org.trelev.eventmgr.serializer.ParticipantRegisteredSerializer"
			trelev-participant-unregistered= "org.trelev.eventmgr.serializer.ParticipantUnregisteredSerializer"
		}
		serialization-bindings {
	   		"org.trelev.eventmgr.domain.EventActor$EventCreated" = trelev-event-created
			"org.trelev.eventmgr.domain.EventActor$EventCanceled" = trelev-event-canceled
			"org.trelev.eventmgr.domain.EventActor$EventUpdated" = trelev-event-updated
			"org.trelev.eventmgr.domain.EventActor$ParticipantRegistered" = trelev-participant-registered
			"org.trelev.eventmgr.domain.EventActor$ParticipantUnregistered" = trelev-participant-unregistered
		}
	}
}
mail-dispatcher {
	# Dispatcher is the name of the event-based dispatcher
	type = Dispatcher
	# What kind of ExecutionService to use
	executor = "fork-join-executor"
	# Configuration for the fork join pool
	fork-join-executor {
		# Min number of threads to cap factor-based parallelism number to
		parallelism-min = 2
		# Parallelism (threads) ... ceil(available processors * factor)
		parallelism-factor = 2.0
		# Max number of threads to cap factor-based parallelism number to
		parallelism-max = 3 
	}
	# Throughput defines the maximum number of messages to be
	# processed per actor before the thread jumps to the next actor.
	# Set to 1 for as fair as possible.
	throughput = 100
}	
